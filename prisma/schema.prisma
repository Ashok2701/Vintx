generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  bio       String?
  location  String?
  verified  Boolean  @default(false)
  rating    Float    @default(0)
  totalSales Int     @default(0)
  
  // Relationships
  products  Product[] @relation("UserProducts")
  purchases Order[]   @relation("UserPurchases")
  sales     Order[]   @relation("UserSales")
  reviews   Review[]  @relation("UserReviews")
  receivedReviews Review[] @relation("UserReceivedReviews")
  favorites Favorite[]
  messages  Message[]
  conversations Conversation[] @relation("ConversationParticipants")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String     @id @default(cuid())
  name     String
  slug     String     @unique
  icon     String?
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  logo     String?
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id       String    @id @default(cuid())
  name     String
  category String    // e.g., "clothing", "shoes"
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Condition {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  originalPrice Float?
  images      String[]
  status      ProductStatus @default(ACTIVE)
  views       Int       @default(0)
  likes       Int       @default(0)
  
  // Product details
  color       String?
  material    String?
  
  // Relationships
  sellerId    String
  seller      User      @relation("UserProducts", fields: [sellerId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?    @relation(fields: [brandId], references: [id])
  sizeId      String?
  size        Size?     @relation(fields: [sizeId], references: [id])
  conditionId String
  condition   Condition @relation(fields: [conditionId], references: [id])
  
  orders      Order[]
  favorites   Favorite[]
  reviews     Review[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  
  // Shipping details
  shippingAddress Json
  trackingNumber  String?
  
  // Relationships
  buyerId   String
  buyer     User    @relation("UserPurchases", fields: [buyerId], references: [id])
  sellerId  String
  seller    User    @relation("UserSales", fields: [sellerId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5 stars
  comment  String?
  
  // Relationships
  reviewerId String
  reviewer   User    @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewedId String
  reviewed   User    @relation("UserReceivedReviews", fields: [reviewedId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Conversation {
  id           String    @id @default(cuid())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  
  createdAt DateTime @default(now())
}

enum ProductStatus {
  ACTIVE
  SOLD
  RESERVED
  INACTIVE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}